var documenterSearchIndex = {"docs":
[{"location":"#MPISort.jl-Documentation","page":"MPISort.jl Documentation","title":"MPISort.jl Documentation","text":"","category":"section"},{"location":"","page":"MPISort.jl Documentation","title":"MPISort.jl Documentation","text":"Distributed MPI-based sorting API with the same inputs as the base Julia sorters.","category":"page"},{"location":"#Index","page":"MPISort.jl Documentation","title":"Index","text":"","category":"section"},{"location":"","page":"MPISort.jl Documentation","title":"MPISort.jl Documentation","text":"","category":"page"},{"location":"sihsort/#SIHSort-API","page":"SIHSort API","title":"SIHSort API","text":"","category":"section"},{"location":"sihsort/","page":"SIHSort API","title":"SIHSort API","text":"Sampling with interpolated histograms sorting algorithm, or SIHSort (pronounce sigh sort).","category":"page"},{"location":"sihsort/","page":"SIHSort API","title":"SIHSort API","text":"mpisort!\nSIHSort\nSIHSortStats","category":"page"},{"location":"sihsort/#MPISort.mpisort!","page":"SIHSort API","title":"MPISort.mpisort!","text":"function mpisort!(\n    v::AbstractVector;\n    alg::SIHSort,\n    by=identity,\n    kws...\n)\n\nDistributed MPI-based sorting API with the same inputs as the base Julia sorters.\n\nImportant: the input vector will be mutated, but the sorted elements for each MPI rank will be returned; this is required as the vector size will change with data migration.\n\nAdditional keywords kws... are forwarded to the local sorter and searchsortedlast.\n\nExamples\n\nDifferent sorting settings:\n\n# Automatically uses MPI.COMM_WORLD as communicator; doesn't save sorting stats\nsorted_local_array = mpisort!(local_array; alg=SIHSort())\n\n# Reverse sorting; specify communicator explicitly\nsorted_local_array = mpisort!(local_array; alg=SIHSort(comm), rev=true)\n\n# Specify key to sort by; see https://docs.julialang.org/en/v1/base/sort/\nsorted_local_array = mpisort!(local_array; alg=SIHSort(), by=x->x[\"key\"])\n\n# Different ordering; see https://docs.julialang.org/en/v1/base/sort/#Alternate-orderings\nsorted_local_array = mpisort!(local_array; alg=SIHSort(), order=Reverse)\n\n# Save sorting stats\nalg = SIHSort(comm)\nsorted_local_array = mpisort!(local_array; alg=alg)\n\n@show alg.stats.splitters               # `nranks - 1` elements splitting arrays between nodes\n@show alg.stats.num_elements            # `nranks` integers specifying number of elements on each node\n\n# Use different in-place local sorter\nalg = SIHSort(comm, nothing)            # Default: standard Base.sort!\nalg = SIHSort(comm, QuickSort)          # Specify algorithm, passed to Base.sort!(...; alg=<Algorithm>)\nalg = SIHSort(comm, v -> mysorter!(v))  # Pass any function that sorts a local vector in-place\n\n\n\n\n\n","category":"function"},{"location":"sihsort/#MPISort.SIHSort","page":"SIHSort API","title":"MPISort.SIHSort","text":"struct SIHSort <: Base.Sort.Algorithm\n\nSampling with interpolated histograms sorting algorithm, or SIHSort (pronounce sigh sort).\n\nMethods\n\nSIHSort(comm)\nSIHSort(comm, sorter)\nSIHSort(;comm=MPI.COMM_WORLD, sorter=nothing, stats=SIHSortStats())\n\nFields\n\ncomm::MPI.Comm: MPI communicator used. Default: MPI.COMM_WORLD\nroot::Int64: MPI root rank for reductions. Default: 0\nsorter::Union{Nothing, Function, Base.Sort.Algorithm}: Local in-place sorter used. Default: nothing\nstats::SIHSortStats: Useful stats saved after sorting, e.g. elements' partitioning. Default: SIHSortStats()\n\n\n\n\n\n","category":"type"},{"location":"sihsort/#MPISort.SIHSortStats","page":"SIHSort API","title":"MPISort.SIHSortStats","text":"mutable struct SIHSortStats\n\nUseful stats saved after sorting.\n\nMethods\n\nSIHSortStats(splitters, num_elements)\nSIHSortStats(;splitters=nothing, num_elements=nothing)\n\nFields\n\nsplitters::Union{Nothing, Vector}: Values used to split elements across MPI ranks, length=nranks - 1 Default: nothing\nnum_elements::Union{Nothing, Vector{Int64}}: Number of elements saved locally to each MPI rank, length=nranks. Default: nothing\n\n\n\n\n\n","category":"type"}]
}
